--Operator CONTAINS - Podstawy
--ZAD 1
CREATE TABLE CYTATY AS SELECT * FROM ztpd.cytaty;
SELECT * FROM CYTATY;

--ZAD 2
SELECT AUTOR, TEKST
FROM CYTATY
WHERE LOWER(TEKST) LIKE '%pesymista%' AND LOWER(TEKST) LIKE '%optymista%';

--ZAD 3
CREATE INDEX TEKST_IDX
ON CYTATY(TEKST)
INDEXTYPE IS CTXSYS.CONTEXT;

--ZAD 4
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'pesymista AND optymista', 1) > 0;

--ZAD 5
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'pesymista ~ optymista', 1) > 0;

--ZAD 6
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'NEAR((pesymista, optymista), 3)') > 0;

--ZAD 7
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'NEAR((pesymista, optymista), 10)') > 0;

--ZAD 8
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0;

--ZAD 9
SELECT AUTOR, TEKST, SCORE(1) AS DOPASOWANIE
FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0;

--ZAD 10
SELECT AUTOR, TEKST, SCORE(1) AS DOPASOWANIE
FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0 AND ROWNUM <= 1
ORDER BY DOPASOWANIE DESC;

--ZAD 11
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'FUZZY(probelm,,,N)', 1) > 0;

--ZAD 12
INSERT INTO CYTATY VALUES(
    39,
    'Bertrand Russell',
    'To smutne, że głupcy są tacy pewni siebie, a ludzie rozsądni tacy pełni wątpliwości.'
);

COMMIT;

--ZAD 13
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'głupcy', 1) > 0;
--Indeks nie został jeszcze odświeżony

--ZAD 14
SELECT TOKEN_TEXT
FROM DR$TEKST_IDX$I
WHERE TOKEN_TEXT = 'głupcy';

--ZAD 15
DROP INDEX TEKST_IDX;

CREATE INDEX TEKST_IDX
ON CYTATY(TEKST)
INDEXTYPE IS CTXSYS.CONTEXT;

--ZAD 16
SELECT AUTOR, TEKST
FROM CYTATY
WHERE CONTAINS(TEKST, 'głupcy', 1) > 0;

--ZAD 17
DROP INDEX TEKST_IDX;

DROP TABLE CYTATY;

--Zaawansowane indeksowanie i wyszukiwanie
--ZAD 1
CREATE TABLE QUOTES AS SELECT * FROM ztpd.quotes;
SELECT * FROM QUOTES;

--ZAD 2
CREATE INDEX TEXT_IDX
ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT;

--ZAD 3
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'work', 1) > 0;

SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, '$work', 1) > 0;

SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'working', 1) > 0;

SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, '$working', 1) > 0;

--ZAD 4
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'it', 1) > 0; 
--System nie zwrócił wyników, ponieważ słowo 'it' jest domyślnie wyłączone

--ZAD 5
SELECT * FROM CTX_STOPLISTS;
--DEFAULT_STOPLIST

--ZAD 6
SELECT * FROM CTX_STOPWORDS;

--ZAD 7
DROP INDEX TEXT_IDX;

CREATE INDEX TEXT_IDX
ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT
PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST');

--ZAD 8
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'it', 1) > 0; 
--Tym razem wyniki zostały zwócone

--ZAD 9
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'fool AND humans', 1) > 0;

--ZAD 10
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'fool AND computer', 1) > 0;

--ZAD 11
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, '(fool AND humans) WITHIN SENTENCE', 1) > 0;
--"sekcja SENTENCE nie istnieje"

--ZAD 12
DROP INDEX TEXT_IDX;

--ZAD 13
BEGIN
    CTX_DDL.CREATE_SECTION_GROUP('newgroup', 'NULL_SECTION_GROUP');
    CTX_DDL.ADD_SPECIAL_SECTION('newgroup',  'SENTENCE');
    CTX_DDL.ADD_SPECIAL_SECTION('newgroup',  'PARAGRAPH');
END;

--ZAD 14
CREATE INDEX TEXT_IDX
ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT
PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST section group newgroup');

--ZAD 15
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, '(fool AND humans) WITHIN SENTENCE', 1) > 0;

SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, '(fool AND computer) WITHIN SENTENCE', 1) > 0;
--Działają

--ZAD 16
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'humans', 1) > 0;
--Ponieważ słowa z myślnikiem uznawane są za 2 osobne słowa

--ZAD 17
DROP INDEX TEXT_IDX;

BEGIN
    CTX_DDL.CREATE_PREFERENCE('lekser','BASIC_LEXER');
    CTX_DDL.SET_ATTRIBUTE('lekser', 'printjoins', '-');
    CTX_DDL.SET_ATTRIBUTE('lekser', 'index_text', 'YES');
END;

CREATE INDEX TEXT_IDX
ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT
PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST section group newgroup LEXER lekser');

--ZAD 18
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'humans', 1) > 0;
--Nie zwrócił 'non-humans'

--ZAD 19
SELECT AUTHOR, TEXT
FROM QUOTES
WHERE CONTAINS(TEXT, 'non\-humans', 1) > 0;

--ZAD 20
DROP TABLE QUOTES;

BEGIN
    CTX_DDL.DROP_SECTION_GROUP('newgroup');
    CTX_DDL.DROP_PREFERENCE('lekser');
END;
